{
    "docs": [
        {
            "location": "/",
            "text": "Crate\n\n  \n\n    Popup Discord widgets for your website.\n  \n\n\n\n\n\n\n    \n\n        \n\n            Demo\n        \n\u00a0|\n        \n\n            Trello\n    \n\u00a0|\n        \n\n            Discord\n        \n\n    \n\n    \n\n  \n\n        \n\n    \n\n    \n\n        \n\n    \n\n\n\n\n\n\n\n\nWhat is it?\n\u00b6\n\n\nCrate is a JS library that allows you to place Discord buttons on your website. It features\n\n\n\n\nReal-time messages toasts on your website\n\n\nUnread message indicator\n\n\nHighly configurable options\n\n\nExtensive API",
            "title": "Introduction"
        },
        {
            "location": "/#what-is-it",
            "text": "Crate is a JS library that allows you to place Discord buttons on your website. It features   Real-time messages toasts on your website  Unread message indicator  Highly configurable options  Extensive API",
            "title": "What is it?"
        },
        {
            "location": "/options/",
            "text": "Options\n\u00b6\n\n\nTypescript typings\n/**\n\n\n * WidgetBot widget options\n\n\n */\n\n\nserver\n: \nstring\n                \n// Your guilds ID\n\n\nchannel\n: \nstring\n               \n// Channel ID\n\n\noptions?\n: \nstring\n              \n// WidgetBot widget options\n\n\nbeta?\n: \nboolean\n                \n// Whether to use the beta domain or not\n\n\nbuttons\n?:\n \n{\n                   \n// Change text of buttons\n\n  \nprimary?\n: \nstring\n\n  \nsecondary?\n: \nstring\n\n\n}\n\n\nusername\n: \nstring\n              \n// Use a specific username for the guest chatter\n\n\n\n\n/**\n\n\n * Aesthetic options\n\n\n */\n\n\nlogo?\n: \nUrl\n \n|\n \n'intercom'\n \n|\n \n'discord'\n \n|\n \nany\n \n|\n \n{\n\n  \nurl\n: \nUrl\n\n  \nsize?\n: \nstring\n\n\n}\n\n\nscheme\n?:\n \n'dark'\n \n|\n \n'light'\n     \n// Whether to show dark or light toasts\n\n\nstyle\n?:\n \n'material'\n \n|\n \n'discord'\n// Toggle button style\n\n\ncolors\n?:\n \n{\n\n  \ntoggle?\n: \nstring\n             \n// Crate toggle button color\n\n  \nbackground?\n: \nstring\n         \n// WidgetBot widget background\n\n  \nbutton?\n: \nstring\n             \n// WidgetBot `Start chatting` button color\n\n\n}\n\n\nposition\n:\n \n{\n\n  \nx\n:\n \n'left'\n \n|\n \n'right'\n\n  \ny\n:\n \n'top'\n \n|\n \n'bottom'\n\n\n}\n\n\ncontained\n: \nboolean\n            \n// Display modals in iframe or in the window\n\n\nmobile\n?:\n \n{\n\n  \nmaxWidth?\n: \nnumber\n           \n// The screen resolution at which the mobile version should be used\n\n  \nmaxHeight?\n: \nnumber\n          \n// The screen resolution at which the mobile version should be used\n\n\n}\n\n\n\n\n/**\n\n\n * Notifications\n\n\n */\n\n\nnotifications\n?:\n \n{\n\n  \nindicator\n?:\n \n{\n\n    \nenable\n: \nboolean\n\n  \n}\n\n  \ntoasts\n?:\n \n{\n\n    \nenable\n: \nboolean\n           \n// Whether to enable toasts or not\n\n    \nvisibilityTime?\n: \nnumber\n   \n// Max amount of time the toasts should be visible for (set to 0 to disable timeout)\n\n    \nmaxMessages?\n: \nnumber\n      \n// Max amount of messages to display on screen\n\n    \nmaxHeight?\n: \nstring\n        \n// Max height of the toast container, CSS `calc()` can be used\n\n  \n}\n\n\n}\n\n\n\n\n/**\n\n\n * General options\n\n\n */\n\n\ndelay?\n: \nboolean\n               \n// Only load the widget once the button has been clicked\n\n\ndebug?\n: \nboolean\n               \n// Debug crate\n\n\ndisable\n?:\n \n(\n'toggle'\n \n|\n \n'toasts'\n \n|\n \n'embed'\n \n|\n \n'modal'\n)[]\n \n// Disable components",
            "title": "Options"
        },
        {
            "location": "/options/#options",
            "text": "Typescript typings /**   * WidgetBot widget options   */  server :  string                  // Your guilds ID  channel :  string                 // Channel ID  options? :  string                // WidgetBot widget options  beta? :  boolean                  // Whether to use the beta domain or not  buttons ?:   {                     // Change text of buttons \n   primary? :  string \n   secondary? :  string  }  username :  string                // Use a specific username for the guest chatter  /**   * Aesthetic options   */  logo? :  Url   |   'intercom'   |   'discord'   |   any   |   { \n   url :  Url \n   size? :  string  }  scheme ?:   'dark'   |   'light'       // Whether to show dark or light toasts  style ?:   'material'   |   'discord' // Toggle button style  colors ?:   { \n   toggle? :  string               // Crate toggle button color \n   background? :  string           // WidgetBot widget background \n   button? :  string               // WidgetBot `Start chatting` button color  }  position :   { \n   x :   'left'   |   'right' \n   y :   'top'   |   'bottom'  }  contained :  boolean              // Display modals in iframe or in the window  mobile ?:   { \n   maxWidth? :  number             // The screen resolution at which the mobile version should be used \n   maxHeight? :  number            // The screen resolution at which the mobile version should be used  }  /**   * Notifications   */  notifications ?:   { \n   indicator ?:   { \n     enable :  boolean \n   } \n   toasts ?:   { \n     enable :  boolean             // Whether to enable toasts or not \n     visibilityTime? :  number     // Max amount of time the toasts should be visible for (set to 0 to disable timeout) \n     maxMessages? :  number        // Max amount of messages to display on screen \n     maxHeight? :  string          // Max height of the toast container, CSS `calc()` can be used \n   }  }  /**   * General options   */  delay? :  boolean                 // Only load the widget once the button has been clicked  debug? :  boolean                 // Debug crate  disable ?:   ( 'toggle'   |   'toasts'   |   'embed'   |   'modal' )[]   // Disable components",
            "title": "Options"
        },
        {
            "location": "/api/",
            "text": "API\n\u00b6\n\n\nOnce you've initialised a new constructor, you can manipulate it using the following methods\n\n\nInteraction\n\u00b6\n\n\ntoggle\n(\nopen\n?:\n \nboolean\n)\n\u00b6\n\n\nToggles the message view, with an optional param to set it.\n\n\n\n\nUsage\n\n\n// Toggle\n\n\ncrate\n.\ntoggle\n()\n\n\n\n// Toggle open\n\n\ncrate\n.\ntoggle\n(\ntrue\n)\n\n\n\n// Toggle closed\n\n\ncrate\n.\ntoggle\n(\nfalse\n)\n\n\n\n\n\nTry it:\n \ntoggle()\n\n\ntoggle(true)\n\n\ntoggle(false)\n\n\n\n\npulse\n(\npulsing\n?:\n \nboolean\n)\n\u00b6\n\n\nPulses the button with with an optional param to set it.\n\n\n\n\nUsage\n\n\n// Toggle pulse\n\n\ncrate\n.\npulse\n()\n\n\n\n// Start pulsing\n\n\ncrate\n.\npulse\n(\ntrue\n)\n\n\n\n// Stop pulsing\n\n\ncrate\n.\npulse\n(\nfalse\n)\n\n\n\n\n\nTry it:\n \npulse()\n\n\npulse(true)\n\n\npulse(false)\n\n\n\n\nmessage\n(\ncontent\n:\n \nstring\n,\n \ntimeout\n?:\n \nnumber\n,\n \navatar\n?:\n \nurl\n)\n\u00b6\n\n\nProgrammatically displays a toast message. Supports discords markdown\n\n\n\n\nUsage\n\n\n// Hello world\n\n\ncrate\n.\nmessage\n(\n`**hello** world`\n)\n\n\n\n// Display for 2 seconds\n\n\ncrate\n.\nmessage\n(\n'`2 seconds`'\n,\n \n2000\n)\n\n\n\n// Custom avatar\n\n\ncrate\n.\nmessage\n(\n'samdd'\n,\n \nfalse\n,\n \n'https://cdn.samdd.me/samdd-logo/variations/logo.png'\n)\n\n\n\n\n\nTry it:\n \nhello world\n\n\n2 seconds\n\n\ncustom avatar\n\n\n\n\nconfig\n(\nnew\n:\n \nConfig\n)\n\u00b6\n\n\nUpdates the configuration for crate in real time. \nAvailable options\n\n\n\n\nUsage\n\n\n// Change toggle to a random color\n\n\ncrate\n.\nconfig\n({\n\n  \ncolors\n:\n \n{\n\n    \n...\ncrate\n.\nstate\n.\nconfig\n.\ncolors\n,\n\n    \ntoggle\n:\n \n'#'\n+\nMath\n.\nrandom\n().\ntoString\n(\n16\n).\nslice\n(\n2\n,\n \n8\n)\n\n  \n}\n\n\n})\n\n\n\n// Switch position\n\n\ncrate\n.\nconfig\n({\n\n  \nposition\n:\n \n{\n\n    \nx\n:\n \ncrate\n.\nstate\n.\nconfig\n.\nposition\n.\nx\n \n===\n \n'left'\n \n?\n \n'right'\n \n:\n \n'left'\n,\n\n    \ny\n:\n \ncrate\n.\nstate\n.\nconfig\n.\nposition\n.\ny\n,\n\n  \n}\n\n\n})\n\n\n\n\n\nTry it:\n \nchange colors\n\n\nswitch position\n\n\n\n\n\n\nVisibility\n\u00b6\n\n\nshow\n()\n\u00b6\n\n\nUn-hides the entire widget by re-attaching the React component from the DOM.\n\n\n\n\nUsage\n\n\n// Button will now appear\n\n\ncrate\n.\nshow\n()\n\n\n\n\n\nTry it:\n \nshow()\n\n\n\n\nhide\n()\n\u00b6\n\n\nHides the entire widget by detaching the React component from the DOM.\n\n\n\n\nUsage\n\n\n// Button will now disappear\n\n\ncrate\n.\nhide\n()\n\n\n\n\n\nTry it:\n \nhide()\n\n\n\n\nremove\n()\n\u00b6\n\n\nPermanently removes the entire widget by detaching the React component from the DOM.\n\n\n\n\nUsage\n\n\n// Button will disappear\n\n\ncrate\n.\nremove\n()\n\n\n\n\n\nTry it:\n \nremove()",
            "title": "Methods"
        },
        {
            "location": "/api/#api",
            "text": "Once you've initialised a new constructor, you can manipulate it using the following methods",
            "title": "API"
        },
        {
            "location": "/api/#interaction",
            "text": "",
            "title": "Interaction"
        },
        {
            "location": "/api/#toggleopen-boolean",
            "text": "Toggles the message view, with an optional param to set it.   Usage  // Toggle  crate . toggle ()  // Toggle open  crate . toggle ( true )  // Toggle closed  crate . toggle ( false )   Try it:   toggle()  toggle(true)  toggle(false)",
            "title": "toggle(open?: boolean)"
        },
        {
            "location": "/api/#pulsepulsing-boolean",
            "text": "Pulses the button with with an optional param to set it.   Usage  // Toggle pulse  crate . pulse ()  // Start pulsing  crate . pulse ( true )  // Stop pulsing  crate . pulse ( false )   Try it:   pulse()  pulse(true)  pulse(false)",
            "title": "pulse(pulsing?: boolean)"
        },
        {
            "location": "/api/#messagecontent-string-timeout-number-avatar-url",
            "text": "Programmatically displays a toast message. Supports discords markdown   Usage  // Hello world  crate . message ( `**hello** world` )  // Display for 2 seconds  crate . message ( '`2 seconds`' ,   2000 )  // Custom avatar  crate . message ( 'samdd' ,   false ,   'https://cdn.samdd.me/samdd-logo/variations/logo.png' )   Try it:   hello world  2 seconds  custom avatar",
            "title": "message(content: string, timeout?: number, avatar?: url)"
        },
        {
            "location": "/api/#confignew-config",
            "text": "Updates the configuration for crate in real time.  Available options   Usage  // Change toggle to a random color  crate . config ({ \n   colors :   { \n     ... crate . state . config . colors , \n     toggle :   '#' + Math . random (). toString ( 16 ). slice ( 2 ,   8 ) \n   }  })  // Switch position  crate . config ({ \n   position :   { \n     x :   crate . state . config . position . x   ===   'left'   ?   'right'   :   'left' , \n     y :   crate . state . config . position . y , \n   }  })   Try it:   change colors  switch position",
            "title": "config(new: Config)"
        },
        {
            "location": "/api/#visibility",
            "text": "",
            "title": "Visibility"
        },
        {
            "location": "/api/#show",
            "text": "Un-hides the entire widget by re-attaching the React component from the DOM.   Usage  // Button will now appear  crate . show ()   Try it:   show()",
            "title": "show()"
        },
        {
            "location": "/api/#hide",
            "text": "Hides the entire widget by detaching the React component from the DOM.   Usage  // Button will now disappear  crate . hide ()   Try it:   hide()",
            "title": "hide()"
        },
        {
            "location": "/api/#remove",
            "text": "Permanently removes the entire widget by detaching the React component from the DOM.   Usage  // Button will disappear  crate . remove ()   Try it:   remove()",
            "title": "remove()"
        },
        {
            "location": "/api/listeners/",
            "text": "API\n\u00b6\n\n\nOnce you've initialised a new constructor, you can hook onto events using the \n.on\n()\n event listener API\n\n\nAvailable events\n\u00b6\n\n\nBelow defines all possible events and their callbacked values\n\n\n\n\nEvents\n\n\ninterface\n \nEvents\n \n{\n\n  \n// Message event\n\n  \nmessage\n: \nMessage\n\n\n  \n// Once the iframe has loaded\n\n  \nwidget\n-\nloaded\n\n\n  \n// Toast click event\n\n  \nmessage\n-\nclick\n: \nMessage\n\n\n  \n// Button toggle event\n\n  \ntoggle\n: \nboolean\n\n\n  \n// API .show() and .hide() events\n\n  \nvisibility\n: \nboolean\n\n\n  \n// API .pulse() event\n\n  \npulse\n: \nboolean\n\n\n}\n\n\n\n\n\n\n\n\n\nListen to a specific event\n\u00b6\n\n\non\n(\neventName\n:\n \nstring\n,\n \ncallback\n:\n \nFunction\n)\n\u00b6\n\n\nListens for a specific event, calling the callback when triggered\n\n\n\n\nUsage\n\n\n// Listen for toggle events\n\n\ncrate\n.\non\n(\n'toggle'\n,\n \nopen\n \n=>\n \n{\n\n  \nalert\n(\n`Crate is now \n${\nopen\n \n?\n \n'open'\n \n:\n \n'hidden'\n}\n`\n)\n\n\n})\n\n\n\n\n\nTry it:\n \nListen for event\n\n\nTrigger event\n\n\n\n\n\n\nListen for all events\n\u00b6\n\n\nonEvent\n(\ncallback\n:\n \nFunction\n)\n\u00b6\n\n\nListens for all events, calling the callback when any event is fired\n\n\n\n\nUsage\n\n\n// Listen for any events and create a message once received\n\n\ncrate\n.\nonEvent\n((\ndata\n)\n \n=>\n \n{\n\n  \ncrate\n.\nmessage\n(\nJSON\n.\nstringify\n(\ndata\n))\n\n\n})\n\n\n\n\n\nTry it:\n \nListen for events\n\n\nTrigger event\n\n\n\n\n\n\nFake an event\n\u00b6\n\n\ncrateEvent\n(\nname\n:\n \nstring\n,\n \ndata\n?:\n \nany\n)\n\u00b6\n\n\nFires an event to all attached listeners\n\n\n\n\nUsage\n\n\n// Fakes an event without actually doing anything\n\n\ncrate\n.\ncrateEvent\n(\n'toggle'\n,\n \ntrue\n)\n\n\n\n\n\nTry it:\n \nListen for events\n\n\nFake event",
            "title": "Listeners"
        },
        {
            "location": "/api/listeners/#api",
            "text": "Once you've initialised a new constructor, you can hook onto events using the  .on ()  event listener API",
            "title": "API"
        },
        {
            "location": "/api/listeners/#available-events",
            "text": "Below defines all possible events and their callbacked values   Events  interface   Events   { \n   // Message event \n   message :  Message \n\n   // Once the iframe has loaded \n   widget - loaded \n\n   // Toast click event \n   message - click :  Message \n\n   // Button toggle event \n   toggle :  boolean \n\n   // API .show() and .hide() events \n   visibility :  boolean \n\n   // API .pulse() event \n   pulse :  boolean  }",
            "title": "Available events"
        },
        {
            "location": "/api/listeners/#listen-to-a-specific-event",
            "text": "",
            "title": "Listen to a specific event"
        },
        {
            "location": "/api/listeners/#oneventname-string-callback-function",
            "text": "Listens for a specific event, calling the callback when triggered   Usage  // Listen for toggle events  crate . on ( 'toggle' ,   open   =>   { \n   alert ( `Crate is now  ${ open   ?   'open'   :   'hidden' } ` )  })   Try it:   Listen for event  Trigger event",
            "title": "on(eventName: string, callback: Function)"
        },
        {
            "location": "/api/listeners/#listen-for-all-events",
            "text": "",
            "title": "Listen for all events"
        },
        {
            "location": "/api/listeners/#oneventcallback-function",
            "text": "Listens for all events, calling the callback when any event is fired   Usage  // Listen for any events and create a message once received  crate . onEvent (( data )   =>   { \n   crate . message ( JSON . stringify ( data ))  })   Try it:   Listen for events  Trigger event",
            "title": "onEvent(callback: Function)"
        },
        {
            "location": "/api/listeners/#fake-an-event",
            "text": "",
            "title": "Fake an event"
        },
        {
            "location": "/api/listeners/#crateeventname-string-data-any",
            "text": "Fires an event to all attached listeners   Usage  // Fakes an event without actually doing anything  crate . crateEvent ( 'toggle' ,   true )   Try it:   Listen for events  Fake event",
            "title": "crateEvent(name: string, data?: any)"
        },
        {
            "location": "/definitions/config.d.ts/",
            "text": "Typescript definitions\n\n\nimport\n \n{\n \nUrl\n \n}\n \nfrom\n \n\"url\"\n\n\n\nexport\n \ninterface\n \nConfig\n \n{\n\n  \n/**\n\n\n   * WidgetBot widget options\n\n\n   */\n\n  \nserver\n: \nstring\n                \n// Your guilds ID\n\n  \nchannel\n: \nstring\n               \n// Channel ID\n\n  \noptions?\n: \nstring\n              \n// WidgetBot widget options\n\n  \nbeta?\n: \nboolean\n                \n// Whether to use the beta domain or not\n\n  \nbuttons\n?:\n \n{\n                   \n// Change text of buttons\n\n    \nprimary?\n: \nstring\n\n    \nsecondary?\n: \nstring\n\n  \n}\n\n  \nusername\n: \nstring\n              \n// Use a specific username for the guest chatter\n\n\n  \n/**\n\n\n   * Aesthetic options\n\n\n   */\n\n  \nlogo?\n: \nUrl\n \n|\n \n'intercom'\n \n|\n \n'discord'\n \n|\n \nany\n \n|\n \n{\n\n    \nurl\n: \nUrl\n\n    \nsize?\n: \nstring\n\n  \n}\n\n  \nscheme\n?:\n \n'dark'\n \n|\n \n'light'\n     \n// Whether to show dark or light toasts\n\n  \nstyle\n?:\n \n'material'\n \n|\n \n'discord'\n// Toggle button style\n\n  \ncolors\n?:\n \n{\n\n    \ntoggle?\n: \nstring\n             \n// Crate toggle button color\n\n    \nbackground?\n: \nstring\n         \n// WidgetBot widget background\n\n    \nbutton?\n: \nstring\n             \n// WidgetBot `Start chatting` button color\n\n  \n}\n\n  \nposition\n:\n \n{\n\n    \nx\n:\n \n'left'\n \n|\n \n'right'\n\n    \ny\n:\n \n'top'\n \n|\n \n'bottom'\n\n  \n}\n\n  \ncontained\n: \nboolean\n            \n// Display modals in iframe or in the window\n\n  \nmobile\n?:\n \n{\n\n    \nmaxWidth?\n: \nnumber\n           \n// The screen resolution at which the mobile version should be used\n\n    \nmaxHeight?\n: \nnumber\n          \n// The screen resolution at which the mobile version should be used\n\n  \n}\n\n\n  \n/**\n\n\n   * Notifications\n\n\n   */\n\n  \nnotifications\n?:\n \n{\n\n    \nindicator\n?:\n \n{\n\n      \nenable\n: \nboolean\n\n    \n}\n\n    \ntoasts\n?:\n \n{\n\n      \nenable\n: \nboolean\n           \n// Whether to enable toasts or not\n\n      \nvisibilityTime?\n: \nnumber\n   \n// Max amount of time the toasts should be visible for (set to 0 to disable timeout)\n\n      \nmaxMessages?\n: \nnumber\n      \n// Max amount of messages to display on screen\n\n      \nmaxHeight?\n: \nstring\n        \n// Max height of the toast container, CSS `calc()` can be used\n\n    \n}\n\n  \n}\n\n\n  \n/**\n\n\n   * General options\n\n\n   */\n\n  \ndelay?\n: \nboolean\n               \n// Only load the widget once the button has been clicked\n\n  \ndebug?\n: \nboolean\n               \n// Debug crate\n\n  \ndisable\n?:\n \n(\n'toggle'\n \n|\n \n'toasts'\n \n|\n \n'embed'\n \n|\n \n'modal'\n)[]\n \n// Disable components\n\n\n  \n/**\n\n\n   * Overrides\n\n\n   */\n\n  \ndomain?\n: \nstring\n               \n// Override the domain\n\n  \nwidgetURL?\n: \nstring\n            \n// Widget URL without any query strings\n\n  \nurl?\n: \nstring\n                  \n// Final Widget URL for the iframe\n\n  \nquery?\n: \nany\n                   \n// Override the query string\n\n\n}",
            "title": "config.d.ts"
        },
        {
            "location": "/definitions/modal.d.ts/",
            "text": "Typescript definitions\n\n\nexport\n \nnamespace\n \nModal\n \n{\n\n  \nexport\n \nclass\n \nroles\n \n{\n\n    \ncolor\n: \nstring\n\n    \nname\n: \nstring\n\n    \nposition\n: \nnumber\n\n  \n}\n\n\n  \nexport\n \nclass\n \nuser\n \n{\n\n    \nname\n: \nstring\n\n    \nid\n: \nstring\n\n    \ndiscriminator\n: \nstring\n\n    \navatar\n: \nstring\n\n    \nbot\n: \nboolean\n\n    \nroles\n: \nroles\n[]\n\n  \n}\n\n\n}",
            "title": "modal.d.ts"
        },
        {
            "location": "/definitions/notifications.d.ts/",
            "text": "Typescript definitions\n\n\nexport\n \nnamespace\n \nNotifications\n \n{\n\n  \nexport\n \nclass\n \nmessage\n \n{\n\n    \nid\n: \nstring\n\n    \nauthor\n:\n \n{\n\n      \nname\n: \nstring\n\n      \ndiscriminator\n: \nstring\n\n      \nbot\n: \nboolean\n\n      \navatar\n: \nstring\n \n|\n \nnull\n\n      \nid\n: \nstring\n\n      \ncolor\n: \nstring\n,\n\n      \nroles\n: \nany\n\n    \n}\n\n    \nfake?\n: \nboolean\n\n    \ntimestamp\n: \nnumber\n\n    \ncontent\n: \nstring\n \n|\n \nnull\n\n    \nembeds\n: \nany\n\n    \neditedAt\n: \nDate\n\n    \ntype\n: \nstring\n\n    \nreactions\n: \nany\n\n    \nattachment\n:\n \n{\n\n      \nurl\n: \nstring\n \n|\n \nnull\n\n      \nheight\n: \nnumber\n \n|\n \nnull\n\n      \nwidth\n: \nnumber\n \n|\n \nnull\n\n    \n}\n\n    \nmentions\n:\n \n{\n\n      \nchannels\n:\n \n{\n\n        \nname\n: \nstring\n\n        \nid\n: \nstring\n\n      \n}[]\n\n      \nmembers\n:\n \n{\n\n        \nname\n: \nstring\n\n        \nid\n: \nstring\n\n        \nroles\n: \nany\n\n        \navatar\n: \nstring\n\n      \n}[]\n\n      \nroles\n:\n \n{\n\n        \nname\n: \nstring\n\n        \ncolor\n: \nstring\n\n        \nid\n: \nstring\n\n      \n}[]\n\n      \neveryone\n: \nboolean\n\n    \n}\n\n    \nloading\n: \nboolean\n\n    \npinged\n: \nboolean\n\n  \n}\n\n\n}",
            "title": "notifications.d.ts"
        },
        {
            "location": "/definitions/view.d.ts/",
            "text": "Typescript definitions\n\n\nimport\n \n{\n \nConfig\n \n}\n \nfrom\n \n'./config'\n\n\n\nexport\n \ninterface\n \nView\n \n{\n\n  \nview\n:\n \n{\n\n    \nopen\n: \nboolean\n\n    \nopened\n: \nboolean\n \n// Has to be set to true for the iframe to render\n\n    \nloading\n: \nboolean\n\n    \nmodalOpen\n: \nboolean\n\n  \n}\n\n  \nconfig\n: \nany\n \n|\n \nConfig\n\n  \nevent\n(\ndata\n: \nObject\n)\n\n\n}",
            "title": "view.d.ts"
        },
        {
            "location": "/examples/",
            "text": "Async\n\u00b6\n\n\nDefault \nwindow.crate\n object\n\u00b6\n\n\nSee the Pen \nYYBdBL\n by Sam Denty (\n@samdenty99\n) on \nCodePen\n.\n\n\n\n\nInitialising a custom crate object\n\u00b6\n\n\nSee the Pen \nrpPoRW\n by Sam Denty (\n@samdenty99\n) on \nCodePen\n.\n\n\n\n\nMultiple instances at the same time\n\u00b6\n\n\nSee the Pen \naEXPMw\n by Sam Denty (\n@samdenty99\n) on \nCodePen\n.\n\n\n\n\nUpdating the state\n\u00b6\n\n\nSee the Pen \nLeqMae\n by Sam Denty (\n@samdenty99\n) on \nCodePen\n.\n\n\n\n\nDynamically interacting with the button\n\u00b6\n\n\nSee the Pen \ngoqZEZ\n by Sam Denty (\n@samdenty99\n) on \nCodePen\n.\n\n\n\n\n\n\n\nSync\n\u00b6\n\n\nWe recommend using the \nasync\n version of the API, as it'll make your website \nway faster\n. The synchronous version should only be used if it's being dynamically inserted into your website after the page's initial load (eg. A custom JS script)\n\n\nInitialising a custom crate object\n\u00b6\n\n\nSee the Pen \nppGqYJ\n by Sam Denty (\n@samdenty99\n) on \nCodePen\n.",
            "title": "Examples"
        },
        {
            "location": "/examples/#async",
            "text": "",
            "title": "Async"
        },
        {
            "location": "/examples/#default-windowcrate-object",
            "text": "See the Pen  YYBdBL  by Sam Denty ( @samdenty99 ) on  CodePen .",
            "title": "Default window.crate object"
        },
        {
            "location": "/examples/#initialising-a-custom-crate-object",
            "text": "See the Pen  rpPoRW  by Sam Denty ( @samdenty99 ) on  CodePen .",
            "title": "Initialising a custom crate object"
        },
        {
            "location": "/examples/#multiple-instances-at-the-same-time",
            "text": "See the Pen  aEXPMw  by Sam Denty ( @samdenty99 ) on  CodePen .",
            "title": "Multiple instances at the same time"
        },
        {
            "location": "/examples/#updating-the-state",
            "text": "See the Pen  LeqMae  by Sam Denty ( @samdenty99 ) on  CodePen .",
            "title": "Updating the state"
        },
        {
            "location": "/examples/#dynamically-interacting-with-the-button",
            "text": "See the Pen  goqZEZ  by Sam Denty ( @samdenty99 ) on  CodePen .",
            "title": "Dynamically interacting with the button"
        },
        {
            "location": "/examples/#sync",
            "text": "We recommend using the  async  version of the API, as it'll make your website  way faster . The synchronous version should only be used if it's being dynamically inserted into your website after the page's initial load (eg. A custom JS script)",
            "title": "Sync"
        },
        {
            "location": "/examples/#initialising-a-custom-crate-object_1",
            "text": "See the Pen  ppGqYJ  by Sam Denty ( @samdenty99 ) on  CodePen .",
            "title": "Initialising a custom crate object"
        }
    ]
}